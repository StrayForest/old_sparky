import asyncio
import json
from typing import Counter
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler, ContextTypes, ConversationHandler, MessageHandler, filters
)
import logging
import asyncpg


tasks_by_captain = {} 

is_picking = False
swaping = False
admin_id = ''
team_pick_count = False
registration_start = False
UP_DOWN = "DOWN"

WAITING_FOR_PHONE = "waiting_for_phone"
WAITING_FOR_NEW_TEAM_NAME = 'waiting_for_team_name'

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

with open('config.json', 'r') as f:
    config = json.load(f)
DB_CONFIG = config['postgresql']

PLAYTIME_OPTIONS = ["0-300", "301-600", "601-1000", "1001-1500", "1501-2000", "2000+"]
roman_numerals = ['I', 'II', 'III', 'IV', 'V', 'VI']

RANKS = [
    "–≠—Ç–µ—Ä–Ω—É—Å", "–í–ª–∞–¥—ã–∫–∞", "–§–∞–Ω—Ç–æ–º", "–û—Ä–∞–∫—É–ª", "–ê—Ä—Ö–æ–Ω—Ç", "–≠–º–∏—Å—Å–∞—Ä",
    "–†–∏—Ç—É–∞–ª–∏—Å—Ç", "–ß–∞—Ä–æ–¥–µ–π", "–ê–ª—Ö–∏–º–∏–∫", "–ò—Å–∫–∞—Ç–µ–ª—å", "–ü–æ—Å–ª—É—à–Ω–∏–∫",
    "–í–∞—Ä–≤–∞—Ä", "–¢–∏—Ç–∞–Ω"
]

POOL_LIST = [
    "Abrams", "Bebop", "Dynamo", "Grey Talon", "Haze", "Infernus",
    "Ivy", "Kelvin", "Lady Geist", "Lash", "McGinnis", "Mo & Krill",
    "Paradox", "Pocket", "Seven", "Vindicta", "Warden", "Wraith",
    "Yamato", "Viscous", "Shiv", "Holliday", "Viper", "Calico", "Mirage"
]

async def get_db_connection():
    try:
        pool = await asyncpg.create_pool(
            user=DB_CONFIG['user'],
            password=DB_CONFIG['password'],
            database=DB_CONFIG['database'],
            host=DB_CONFIG['host'],
            port=6432,
            statement_cache_size=0
        )
        logger.info("–£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ PgBouncer.")
        return pool
    except asyncpg.exceptions.CannotConnectNowError:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –æ–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        raise
    except asyncpg.exceptions.InvalidPasswordError:
        logger.error("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
        raise
    except asyncpg.exceptions.InvalidNameError:
        logger.error("–ù–µ–≤–µ—Ä–Ω—ã–π URI –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ PgBouncer: {e}")
        raise

######################################################################################################################

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        await upsert_user(update)

    except asyncpg.exceptions.CannotConnectNowError:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –æ–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    welcome_text = (
        "*–ü—Ä–∏–≤–µ—Ç! üëã*\n\n"
        "–≠—Ç–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ —Ç—É—Ä–Ω–∏—Ä –æ—Ç *OldSparky!* üèÜ\n\n"
        "_–ß—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, –Ω–∞–∂–º–∏ –∫–æ–º–∞–Ω–¥—É /reg._\n"
    )

    await update.message.reply_text(welcome_text, parse_mode='Markdown')

async def upsert_user(update: Update):
    user_id = update.effective_user.id
    username = update.effective_user.username

    async with await get_db_connection() as conn:
        await conn.execute("""
            INSERT INTO players (user_id, username) 
            VALUES ($1, $2)
            ON CONFLICT (user_id) DO UPDATE 
            SET username = EXCLUDED.username
            WHERE players.username IS DISTINCT FROM EXCLUDED.username
        """, user_id, username)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –∏–ª–∏ –æ–±–Ω–æ–≤–ª—ë–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")

######################################################################################################################

async def reg_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.from_user.id != admin_id:
        return

    global registration_start
    registration_start = True
    await update.message.reply_text("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞.")

async def reg_stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.from_user.id != admin_id:
        return
    
    global registration_start
    registration_start = False
    await update.message.reply_text("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞.")

######################################################################################################################

async def reg(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not registration_start:
        await update.message.reply_text("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞.")
        return

    try:
        user_id = update.effective_user.id
        async with await get_db_connection() as conn:
            existing_user = await conn.fetchrow("SELECT rank FROM players WHERE user_id = $1", user_id)

        if existing_user and existing_user["rank"]:
            await update.message.reply_text("–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–∞ —Ç–µ–∫—É—â–∏–π —Ç—É—Ä–Ω–∏—Ä!")
            return
        
        await upsert_user(update)

        context.user_data.clear()
        keyboard = rank_keyboard()
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ —Å–≤–æ–π —Ä–∞–Ω–≥", reply_markup=keyboard)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.")

def rank_keyboard():
    keyboard = [[InlineKeyboardButton(rank, callback_data=rank)] for rank in RANKS]
    return InlineKeyboardMarkup(keyboard)

async def rank_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    selected_rank = query.data
    context.user_data['rank'] = selected_rank
    
    keyboard = subrank_keyboard(selected_rank)
    await query.message.edit_text("–í—ã–±–µ—Ä–∏ –ø–æ–¥—Ä–∞–Ω–≥", reply_markup=InlineKeyboardMarkup(keyboard))

def subrank_keyboard(selected_rank):
    keyboard = [
        [InlineKeyboardButton(f"{selected_rank} {roman}", callback_data=str(index + 1))]
        for index, roman in enumerate(roman_numerals)
    ]
    keyboard.append([InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_rank")])
    
    return keyboard

async def subrank_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    try:
        selected_subrank = int(query.data)
        context.user_data['subrank'] = selected_subrank
        
        await query.message.edit_text("–í—ã–±–µ—Ä–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –≤ –∏–≥—Ä–µ", reply_markup=playtime_keyboard())
    
    except ValueError:
        logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥—Ä–∞–Ω–≥–∞: {query.data}")
        await query.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")

def playtime_keyboard():
    keyboard = [[InlineKeyboardButton(option, callback_data=option)] for option in PLAYTIME_OPTIONS]
    return InlineKeyboardMarkup(keyboard)

async def playtime_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    context.user_data['playtime'] = query.data
    context.user_data['pool'] = []
    keyboard = pool_keyboard([])
    await query.message.edit_text("–í—ã–±–µ—Ä–∏ –ø—É–ª –≥–µ—Ä–æ–µ–≤ –∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É '–î–∞–ª–µ–µ'", reply_markup=keyboard)

def pool_keyboard(selected_pool):
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –í—ã–±—Ä–∞—Ç—å –≤—Å–µ", callback_data="select_all"),
            InlineKeyboardButton("‚ùå –û—á–∏—Å—Ç–∏—Ç—å", callback_data="clear_all")
        ]
    ]
    for i in range(0, len(POOL_LIST), 3):
        row = [
            InlineKeyboardButton(f"‚úÖ {hero}" if hero in selected_pool else hero, callback_data=hero)
            for hero in POOL_LIST[i:i+3]
        ]
        keyboard.append(row)

    keyboard.append([InlineKeyboardButton("üöÄ –î–∞–ª–µ–µ", callback_data="next")])
    return InlineKeyboardMarkup(keyboard)

async def pool_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    selected_hero = query.data
    if selected_hero == "next":
        pool = context.user_data.get('pool', [])
        if not pool:
            await query.message.edit_text("–í—ã–±–µ—Ä–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –≥–µ—Ä–æ—è!", reply_markup=pool_keyboard(pool))
            return
        return await confirm_registration(update, context)

    pool = context.user_data.get('pool', [])

    if selected_hero in pool:
        pool.remove(selected_hero)
    else:
        pool.append(selected_hero)

    context.user_data['pool'] = pool
    
    keyboard = pool_keyboard(pool)
    await query.message.edit_text("–í—ã–±–µ—Ä–∏ –ø—É–ª –≥–µ—Ä–æ–µ–≤ –∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É '–î–∞–ª–µ–µ'", reply_markup=keyboard)

def generate_confirmation_text(data):
    rank = data.get('rank', '–ù–µ –≤—ã–±—Ä–∞–Ω–æ')
    subrank_index = data.get('subrank', None)

    if subrank_index is not None:
        subrank = roman_numerals[subrank_index - 1]
        full_rank = f"{rank} {subrank}"
    else:
        full_rank = rank

    playtime = data.get('playtime', '–ù–µ –≤—ã–±—Ä–∞–Ω–æ')
    pool = data.get('pool', [])

    if pool == POOL_LIST:
        pool_text = '–í—Å–µ'
    else:
        pool_text = ', '.join(pool) if pool else '–ù–µ –≤—ã–±—Ä–∞–Ω–æ'

    confirmation_text = (
        f"‚ú® <b>–¢–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ:</b>\n\n"
        f"üõ°Ô∏è <b>–†–∞–Ω–≥:</b> {full_rank}\n"
        f"‚è≥ <b>–ß–∞—Å—ã –≤ –∏–≥—Ä–µ:</b> {playtime}\n"
        f"ü¶∏‚Äç‚ôÇÔ∏è <b>–ì–µ—Ä–æ–∏:</b> {pool_text}\n\n"
    )
    
    return confirmation_text

async def confirm_registration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = context.user_data

    confirmation_text = generate_confirmation_text(data)
    confirmation_text += "<i>–ï—Å–ª–∏ –≤—Å–µ –≤–µ—Ä–Ω–æ, –Ω–∞–∂–º–∏ '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'.</i>"

    keyboard = InlineKeyboardMarkup([ 
        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
    ])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    query = update.callback_query
    await query.message.edit_text(confirmation_text, reply_markup=keyboard, parse_mode='HTML')

async def confirm_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    data = context.user_data
    confirmation_text = generate_confirmation_text(data)

    if query.data == "cancel":
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –æ—Ç–º–µ–Ω–∏–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.")
        confirmation_text += "<i>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.</i>"

        await query.message.edit_text(confirmation_text, reply_markup=InlineKeyboardMarkup([]), parse_mode='HTML')

    elif query.data == "confirm":
        username = update.effective_user.username

        if not username:
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –Ω–µ —É–∫–∞–∑–∞–ª –Ω–∏–∫–Ω–µ–π–º –≤ Telegram.")
            await query.message.reply_text("–£ —Ç–µ–±—è –Ω–µ—Ç –Ω–∏–∫–∞ –≤ Telegram.\n–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏:")
            context.user_data[WAITING_FOR_PHONE] = True
            return

        try:
            await save_registration_data(update, context)
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
            confirmation_text += "<i>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! üéâ</i>"

            await query.message.edit_text(confirmation_text, reply_markup=InlineKeyboardMarkup([]), parse_mode='HTML')
            context.user_data[WAITING_FOR_PHONE] = False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}: {e}")
            await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
            context.user_data[WAITING_FOR_PHONE] = False

async def phone_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get(WAITING_FOR_PHONE, False):
        logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ –Ω–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
        return

    phone = update.message.text

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}")

    context.user_data['phone'] = phone

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å –Ω–æ–º–µ—Ä–æ–º {phone}.")
    
    try:
        await save_registration_data(update, context)
        await update.message.reply_text(f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! üéâ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è user_id {update.effective_user.id}: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")

    context.user_data[WAITING_FOR_PHONE] = False

async def save_registration_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    data = context.user_data
    pool_str = ','.join(data.get('pool', [])) if data.get('pool') else None
    phone = data.get('phone', None)

    logger.info(f"–°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è user_id: {user_id}, —Ä–∞–Ω–≥: {data.get('rank')}, –ø–æ–¥—Ä–∞–Ω–≥: {data.get('subrank')}, "
                f"–∏–≥—Ä–æ–≤–æ–µ –≤—Ä–µ–º—è: {data.get('playtime')}, –ø—É–ª: {pool_str}, —Ç–µ–ª–µ—Ñ–æ–Ω: {phone}")

    try:
        async with await get_db_connection() as conn:
            user_check_query = "SELECT user_id FROM players WHERE user_id = $1"
            user_exists = await conn.fetch(user_check_query, user_id)

            if not user_exists:
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∑–∞–ø–∏—Å—å.")
                await conn.execute("""
                    INSERT INTO players (user_id, rank, subrank, playtime, pool, phone)
                    VALUES ($1, $2, $3, $4, $5, $6)
                """, user_id, data.get('rank'), data.get('subrank'), data.get('playtime'), pool_str, phone)
            else:
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å.")
                await conn.execute("""
                    UPDATE players
                    SET rank = $1, subrank = $2, playtime = $3, pool = $4, phone = $5
                    WHERE user_id = $6
                """, data.get('rank'), data.get('subrank'), data.get('playtime'), pool_str, phone, user_id)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è user_id {user_id}: {e}")
        raise

######################################################################################################################

async def ready_check(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.from_user.id != admin_id:
        return

    try:
        async with await get_db_connection() as conn:
            users = await get_registered_users(conn)

            if not users:
                logger.info("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–µ–ø—É—Å—Ç—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º –≤ –ø–æ–ª–µ 'rank'.")
                await update.message.reply_text("–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤.")
                return

            await send_ready_check_message(users, context)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã ready_check: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def get_registered_users(conn):
    query = """
        SELECT user_id 
        FROM players 
        WHERE rank IS NOT NULL
    """
    users = await conn.fetch(query)
    return users

async def send_ready_check_message(users, context):
    tasks = []
    for user in users:
        if 'user_id' not in user:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ user_id —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user}")
            continue

        keyboard = [[
            InlineKeyboardButton("‚úÖ", callback_data=f"ready_yes_{user['user_id']}"),
            InlineKeyboardButton("‚ùå", callback_data=f"ready_no_{user['user_id']}")
        ]]

        tasks.append(asyncio.create_task(send_message(user['user_id'], keyboard, context)))

    await asyncio.gather(*tasks)

async def send_message(user_id, keyboard, context):
    try:
        message = await context.bot.send_message(
            chat_id=user_id,
            text="*–ü–æ–¥—Ç–≤–µ—Ä–¥–∏ —É—á–∞—Å—Ç–∏–µ –≤ —Ç—É—Ä–Ω–∏—Ä–µ*",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º Markdown –¥–ª—è –∂–∏—Ä–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
            parse_mode="Markdown",  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞ Markdown
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {message.message_id}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

    
    await asyncio.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Telegram API

async def ready_check_yes(user_id: int):
    try:
        async with await get_db_connection() as conn:
            query = "SELECT status FROM players WHERE user_id = $1"
            row = await conn.fetchrow(query, user_id)

            if row and row["status"] == "cancel":
                return "–í—Ä–µ–º—è –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã—à–ª–æ."

            query = "UPDATE players SET status = 'ready' WHERE user_id = $1"
            await conn.execute(query, user_id)

        return "–¢—ã –∑–∞–ø–∏—Å–∞–Ω –Ω–∞ —Ç—É—Ä–Ω–∏—Ä!"
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —É—á–∞—Å—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ."

async def ready_check_no(user_id: int):
    try:
        async with await get_db_connection() as conn:
            query = "UPDATE players SET status = 'cancel' WHERE user_id = $1"
            await conn.execute(query, user_id)

        return "–¢—ã –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç —É—á–∞—Å—Ç–∏—è."

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–∞–∑–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—Ç —É—á–∞—Å—Ç–∏—è: {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ."

######################################################################################################################

async def ready_stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.from_user.id != admin_id:
        return

    try:
        async with await get_db_connection() as conn:
            query = "UPDATE players SET status = 'cancel' WHERE status IS NULL OR status = ''"
            await conn.execute(query)

        await update.message.reply_text("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

######################################################################################################################

async def find_captain(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.from_user.id != admin_id:
        return

    keyboard = [
        [InlineKeyboardButton("32", callback_data="teams_32")],
        [InlineKeyboardButton("16", callback_data="teams_16")],
        [InlineKeyboardButton("8", callback_data="teams_8")],
        [InlineKeyboardButton("4", callback_data="teams_4")],
        [InlineKeyboardButton("2", callback_data="teams_2")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞", reply_markup=reply_markup)

async def search_captains(teams_count, update, context):
    logger.info(f"–ò—â–µ–º –∫–∞–ø–∏—Ç–∞–Ω–æ–≤ –¥–ª—è {teams_count} –∫–æ–º–∞–Ω–¥.")
    
    captains = await get_candidates_for_captain(teams_count)

    if not captains:
        await update.callback_query.edit_message_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤.")
        return

    await send_captain_offers(captains, update, context)

    await asyncio.sleep(90)

    await fill_missing_captains(teams_count, update, context)

    await assign_team_numbers_and_notify(update, context, teams_count)

async def get_candidates_for_captain(teams_count):
    try:
        async with await get_db_connection() as conn:
            query = """
                SELECT user_id, rank, COALESCE(subrank, 0) AS subrank, playtime
                FROM players 
                WHERE (status = 'ready') 
                  AND (rank IS NOT NULL AND rank <> '')
                ORDER BY ARRAY_POSITION($1::text[], rank) ASC, 
                         subrank DESC, 
                         ARRAY_POSITION($2::text[], playtime) DESC
                LIMIT $3;
            """
            candidates = await conn.fetch(query, RANKS, list(reversed(PLAYTIME_OPTIONS)), teams_count)
            
            if candidates:
                user_ids = [candidate['user_id'] for candidate in candidates]
                update_query = """
                    UPDATE players
                    SET status = 'waiting_for_captain'
                    WHERE user_id = ANY($1::bigint[]);
                """
                await conn.execute(update_query, user_ids)

            return candidates

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: {e}")
        return []

async def send_captain_offers(captains, update, context):
    for captain in captains:
        user_id = captain['user_id']

        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∫–∞–ø–∏—Ç–∞–Ω—Å—Ç–≤–∞ –∏–≥—Ä–æ–∫—É {user_id} {captain}")
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("–ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_{user_id}")],
            [InlineKeyboardButton("–û—Ç–∫–∞–∑–∞—Ç—å—Å—è", callback_data=f"decline_{user_id}")]
        ])
        
        try:
            message = await context.bot.send_message(
                chat_id=user_id,
                text="*–¢—ã –≤—ã–±—Ä–∞–Ω –∫–∞–ø–∏—Ç–∞–Ω–æ–º.*\n\n_–í —Å–ª—É—á–∞–µ –æ—Ç–∫–∞–∑–∞ —Ç—ã –Ω–µ —Å–º–æ–∂–µ—à—å –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ —Ç—É—Ä–Ω–∏—Ä–µ._",
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
            logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {message.message_id}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

async def fill_missing_captains(teams_count, update, context):
    try:
        async with await get_db_connection() as conn:
            captain_count = await conn.fetchval("SELECT COUNT(*) FROM players WHERE status = 'captain';")
            logger.info(f"–¢–µ–∫—É—â–∏–µ –∫–∞–ø–∏—Ç–∞–Ω—ã: {captain_count}")

            while captain_count < teams_count:
                needed_captains = teams_count - captain_count
                logger.info(f"–ù—É–∂–Ω–æ –µ—â—ë {needed_captains} –∫–∞–ø–∏—Ç–∞–Ω–æ–≤.")

                captains = await get_candidates_for_captain(needed_captains)

                if not captains:
                    logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –∫–∞–ø–∏—Ç–∞–Ω–æ–≤.")
                    await context.bot.send_message(
                        update.message.chat.id,
                        f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è {teams_count} –∫–∞–ø–∏—Ç–∞–Ω–æ–≤."
                    )
                    break

                await send_captain_offers(captains, update, context)

                logger.info("–û–∂–∏–¥–∞–Ω–∏–µ 90 —Å–µ–∫—É–Ω–¥ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤.")
                await asyncio.sleep(90)

                captain_count = await conn.fetchval("SELECT COUNT(*) FROM players WHERE status = 'captain';")
                logger.info(f"–ü–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–∞–ø–∏—Ç–∞–Ω–æ–≤: {captain_count}")

    except Exception as e:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

async def assign_team_numbers_and_notify(update, context, teams_count):
    try:
        async with await get_db_connection() as conn:
            query = """
                SELECT user_id, rank, COALESCE(subrank, 0) AS subrank, playtime
                FROM players 
                WHERE status = 'captain' 
                  AND (rank IS NOT NULL AND rank <> '')
                ORDER BY ARRAY_POSITION($1::text[], rank) ASC, 
                         subrank DESC, 
                         ARRAY_POSITION($2::text[], playtime) DESC;
            """
            captains = await conn.fetch(query, RANKS, list(reversed(PLAYTIME_OPTIONS)))

            for i, captain in enumerate(captains, 1):  
                user_id = captain['user_id']
                await update_captain_status(user_id, 'captain', i)

            message_target = update.message if update.message else update.callback_query.message
            await message_target.reply_text("–ö–∞–ø–∏—Ç–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –¥–ª—è –∫–æ–º–∞–Ω–¥.")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∫–∞–ø–∏—Ç–∞–Ω–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def update_captain_status(user_id, status, team_number=None):
    try:
        async with await get_db_connection() as conn:
            if status == 'captain' and team_number is not None:
                query = """
                    UPDATE players 
                    SET status = $1, team = $2 
                    WHERE user_id = $3;
                """
                await conn.execute(query, status, str(team_number), user_id)
            else:
                query = "UPDATE players SET status = $1 WHERE user_id = $2;"
                await conn.execute(query, status, user_id)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–ø–∏—Ç–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

async def accept(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    try:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–∏–Ω—è—Ç–∏–µ –∫–∞–ø–∏—Ç–∞–Ω—Å—Ç–≤–∞ –æ—Ç {query.from_user.id}. –î–∞–Ω–Ω—ã–µ: {query.data}")

        _, user_id = query.data.split('_')
        user_id = int(user_id)

        logger.info(f"–û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ 'captain'.")
        await update_captain_status(user_id, 'captain')

        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –æ —Ç–æ–º, —á—Ç–æ –æ–Ω —Å—Ç–∞–ª –∫–∞–ø–∏—Ç–∞–Ω–æ–º.")
        await query.edit_message_text("–¢—ã —Å—Ç–∞–ª –∫–∞–ø–∏—Ç–∞–Ω–æ–º!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∫–∞–ø–∏—Ç–∞–Ω—Å—Ç–≤–∞: {e}")
        await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

async def decline(update: Update, _):
    query = update.callback_query
    try:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–∫–∞–∑ –æ—Ç –∫–∞–ø–∏—Ç–∞–Ω—Å—Ç–≤–∞ –æ—Ç {query.from_user.id}. –î–∞–Ω–Ω—ã–µ: {query.data}")

        _, user_id = query.data.split('_')
        user_id = int(user_id)

        logger.info(f"–û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ 'cancel'.")
        await update_captain_status(user_id, 'cancel')

        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –æ —Ç–æ–º, —á—Ç–æ –æ–Ω –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –∫–∞–ø–∏—Ç–∞–Ω—Å—Ç–≤–∞.")
        await query.edit_message_text(text="–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∫–∞–ø–∏—Ç–∞–Ω–∞.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–∞–∑–µ –æ—Ç –∫–∞–ø–∏—Ç–∞–Ω—Å—Ç–≤–∞ –¥–ª—è user_id {user_id}: {e}")
        await query.edit_message_text(text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

######################################################################################################################

async def start_pick(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.from_user.id != admin_id:
        return
    
    global UP_DOWN
    UP_DOWN = "DOWN"

    players = await get_best_players()
    await send_player_buttons(update, players, context)

async def get_best_players():
    try:
        async with await get_db_connection() as conn:
            query = """
                SELECT user_id, rank, playtime, pool, COALESCE(subrank, 0) AS subrank 
                FROM players 
                WHERE (status = 'ready') 
                  AND (rank IS NOT NULL AND rank <> '')
                ORDER BY ARRAY_POSITION($1::text[], rank) ASC,
                        subrank DESC,
                        ARRAY_POSITION($2::text[], playtime) DESC
                LIMIT 5;
            """
            players = await conn.fetch(query, RANKS, list(reversed(PLAYTIME_OPTIONS)))
            
            logger.info(f'–ò–≥—Ä–æ–∫–∏: {players}')
            
            return players

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª—É—á—à–∏—Ö –∏–≥—Ä–æ–∫–æ–≤: {e}")
        return []

async def get_team_id_for_current_turn():
    global UP_DOWN
    
    try:
        async with await get_db_connection() as conn:
            query = "SELECT team FROM players WHERE team IS NOT NULL"
            result = await conn.fetch(query)
            logger.info(f'–ù–æ–º–µ—Ä–∞ –∫–æ–º–∞–Ω–¥: {result}')
        
        if not result:
            return None
        
        teams = [row['team'] for row in result]
        
        team_counts = Counter(teams)
        
        if any(count == 6 for count in team_counts.values()):
            team_counts = {team: count for team, count in team_counts.items() if count != 6}
        
        if len(set(team_counts.values())) == 1:
            UP_DOWN = "DOWN" if UP_DOWN == "UP" else "UP"
        
        if UP_DOWN == "UP":
            min_count = min(team_counts.values())
            min_teams = [team for team, count in team_counts.items() if count == min_count]
            return min(min_teams)
        else:
            if team_counts:
                min_count = min(team_counts.values())
                min_teams = [team for team, count in team_counts.items() if count == min_count]
                return max(min_teams)
        
        return "complete"
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ç—É—Ä–∞: {e}")
        return

async def update_player_status(user_id, team_id, context: ContextTypes.DEFAULT_TYPE):
    user_id = int(user_id)
    team_id = str(team_id)

    try:
        async with await get_db_connection() as conn:
            query = """
                UPDATE players 
                SET status = 'player', team = $1 
                WHERE user_id = $2;
            """
            await conn.execute(query, team_id, user_id)
            logger.info(f"–ò–≥—Ä–æ–∫ {user_id} —Ç–µ–ø–µ—Ä—å –≤ –∫–æ–º–∞–Ω–¥–µ {team_id}.")

        try:
            await context.bot.send_message(
                user_id,
                f"–¢—ã –≤–∑—è—Ç –≤ –∫–æ–º–∞–Ω–¥—É {team_id}."
            )
        except Exception as send_error:
            if "Chat not found" in str(send_error):
                logger.warning(f"–ß–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–≥—Ä–æ–∫—É {user_id}: {send_error}", exc_info=True)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∏–≥—Ä–æ–∫–∞ {user_id}: {e}", exc_info=True)

async def send_player_buttons(update: Update, players, context: ContextTypes.DEFAULT_TYPE):
    global tasks_by_captain

    team_id = await get_team_id_for_current_turn()
    logger.info(f"–ù–æ–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã: {team_id}")

    if not team_id:
        await context.bot.send_message(admin_id, "–ö–∞–ø–∏—Ç–∞–Ω—ã –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã.")
        return
    
    elif team_id == 'complete':
        await notify_users_about_team_completion(context, admin_id)
        return
    
    try:
        async with await get_db_connection() as conn:
            query = "SELECT user_id FROM players WHERE status = 'captain' AND team = $1 LIMIT 1"
            result = await conn.fetch(query, team_id)
            logger.info(f"–ù–∞–π–¥–µ–Ω–Ω—ã–π –∫–∞–ø–∏—Ç–∞–Ω: {result}")

            if not result:
                await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞–ø–∏—Ç–∞–Ω–∞ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
                return

            captain_user_id = result[0]['user_id']

        player_info_text = ""
        buttons = []

        for index, player in enumerate(players, start=1):
            user_id = player['user_id']
            rank = player['rank']
            subrank = player['subrank']
            playtime = player.get('playtime', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
            pool = player.get('pool', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')

            full_rank = f"{rank} {get_roman_numeral(subrank)}"
            pool_text = pool if pool != '–ù–µ —É–∫–∞–∑–∞–Ω–æ' else '–ù–µ –≤—ã–±—Ä–∞–Ω'

            if pool != '–ù–µ —É–∫–∞–∑–∞–Ω–æ':
                pool_text = ', '.join([hero.strip() for hero in pool.split(',')])
            else:
                pool_text = '–ù–µ –≤—ã–±—Ä–∞–Ω'

            player_info_text += f"‚Äîüõ°Ô∏è <b>–†–∞–Ω–≥:</b> {full_rank}\n"
            player_info_text += f"<b>{index}</b> ‚è≥ <b>–ß–∞—Å—ã –≤ –∏–≥—Ä–µ:</b> {playtime}\n"
            player_info_text += f"‚Äîü¶∏‚Äç‚ôÇÔ∏è <b>–ì–µ—Ä–æ–∏:</b> {pool_text}\n\n"

            button = InlineKeyboardButton(str(index), callback_data=f"pick_{user_id}_{captain_user_id}_{team_id}")
            buttons.append(button)

        keyboard = InlineKeyboardMarkup([buttons])

        if captain_user_id in tasks_by_captain:
            task = tasks_by_captain[captain_user_id]
            if not task.done():
                task.cancel()
                try:
                    await task
                except asyncio.CancelledError:
                    pass

        task = asyncio.create_task(auto_pick_player(update, team_id, players, context, captain_user_id))
        tasks_by_captain[captain_user_id] = task

        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–ø–∏—Ç–∞–Ω—É: {captain_user_id}")

        logger.info(f"Bot context: {context.bot}")
        message = await context.bot.send_message(
            captain_user_id,
            f"–í—ã–±–µ—Ä–∏ –∏–≥—Ä–æ–∫–∞ –¥–ª—è —Å–≤–æ–µ–π –∫–æ–º–∞–Ω–¥—ã:\n\n{player_info_text}",
            reply_markup=keyboard,
            parse_mode='HTML'
        )

        context.user_data['message_id'] = message.message_id

        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–∞–ø–∏—Ç–∞–Ω—É {captain_user_id} —Å –∫–Ω–æ–ø–∫–∞–º–∏.")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∫–∞–ø–∏—Ç–∞–Ω–∞: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def auto_pick_player(update: Update, team_id, players, context: ContextTypes.DEFAULT_TYPE, captain_user_id):
    global tasks_by_captain, is_picking


    logger.info(f"–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–ø–∏–∫–∞ –¥–ª—è –∫–∞–ø–∏—Ç–∞–Ω–∞ {captain_user_id}. –û–∂–∏–¥–∞–µ–º 7 —Å–µ–∫—É–Ω–¥.")
    
    await asyncio.sleep(60)

    is_picking = True

    if captain_user_id in tasks_by_captain:
        task = tasks_by_captain[captain_user_id]
        if not task.done():
            logger.info(f"–í—Ä–µ–º—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏—Å—Ç–µ–∫–ª–æ. –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –¥–ª—è –∫–∞–ø–∏—Ç–∞–Ω–∞ {captain_user_id}.")
            first_player = players[0]
            await update_player_status(first_player['user_id'], team_id, context)

            try:
                message_id = context.user_data.get('message_id')
                if message_id:
                    await context.bot.edit_message_text(
                        text="*‚è≥ –í—Ä–µ–º—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏—Å—Ç–µ–∫–ª–æ.*\n\n"
                             "_–õ—É—á—à–∏–π –∏–≥—Ä–æ–∫ –±—ã–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ–º–∞–Ω–¥—É._",
                        chat_id=captain_user_id,
                        message_id=message_id,
                        parse_mode="Markdown"
                    )
                    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –∫–∞–ø–∏—Ç–∞–Ω–∞ {captain_user_id}")
                else:
                    logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω message_id –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–∞–ø–∏—Ç–∞–Ω–∞ {captain_user_id}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    is_picking = False

    players = await get_best_players()
    logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–Ω–æ–ø–æ–∫: {players}")
    
    await send_player_buttons(update, players, context)

async def notify_users_about_team_completion(context: ContextTypes.DEFAULT_TYPE, admin_id: int):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞, –∫—Ä–æ–º–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        async with await get_db_connection() as conn:
            query = "SELECT user_id FROM players WHERE team IS NOT NULL AND team != '' AND user_id != $1"
            users_with_teams = await conn.fetch(query, admin_id)
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∫–æ–º–∞–Ω–¥–∞–º–∏: {users_with_teams}")

            if not users_with_teams:
                logger.info("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏.")
                return

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –∫–æ–º–∞–Ω–¥–∞–º–∏
            for user in users_with_teams:
                user_id = user['user_id']
                try:
                    await context.bot.send_message(
                        user_id,
                        "–ö–æ–º–∞–Ω–¥—ã —É–∫–æ–º–ø–ª–µ–∫—Ç–æ–≤–∞–Ω—ã."
                    )
                    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            
            # –¢–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
            await context.bot.send_message(admin_id, "–ö–æ–º–∞–Ω–¥—ã —É–∫–æ–º–ø–ª–µ–∫—Ç–æ–≤–∞–Ω—ã.")
            logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É.")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ –∫–æ–º–ø–ª–µ–∫—Ç–æ–≤–∞–Ω–∏–∏ –∫–æ–º–∞–Ω–¥: {e}")
        await context.bot.send_message(admin_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

######################################################################################################################

async def tournament_refresh(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("‚úÖ", callback_data="confirm_refresh"),
         InlineKeyboardButton("‚ùå", callback_data="cancel_refresh")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text("–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ?", reply_markup=reply_markup)

async def clear_tournament_data():
    try:
        async with await get_db_connection() as conn:
            query = """
            UPDATE players 
            SET username = NULL, phone = NULL, rank = NULL, subrank = NULL, 
                pool = NULL, playtime = NULL, status = NULL, team = NULL;
            """
            await conn.execute(query)

        return "‚úÖ –¢—É—Ä–Ω–∏—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω—ã!"

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–∞: {e}")
        return "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

######################################################################################################################

async def my_team(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id

    try:
        async with await get_db_connection() as conn:
            user_team_result = await conn.fetchval("SELECT team FROM players WHERE user_id = $1", user_id)
            
            if not user_team_result:
                await update.message.reply_text("–¢—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—à—å –≤ –∫–æ–º–∞–Ω–¥–µ.")
                return

            team_result = await conn.fetch("SELECT team FROM players WHERE team = $1", user_team_result)


            if not team_result:
                await update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.")
                return

            team_number = str(user_team_result)

            players_query = """
                SELECT user_id, username, phone, rank, subrank, playtime, pool, status 
                FROM players 
                WHERE team = $1
            """
            players_result = await conn.fetch(players_query, team_number)

            if not players_result:
                await update.message.reply_text("–ö–æ–º–∞–Ω–¥–∞ –ø—É—Å—Ç–∞.")
                return

            captain_info = "–ö–∞–ø–∏—Ç–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω."
            players_info = ""

            for player in players_result:
                player_nickname = f"@{player['username']}" if player['username'] else (f"{player['phone']}" if player['phone'] else "–ù–µ —É–∫–∞–∑–∞–Ω–æ.")

                if player['pool']:
                    player_pool = [hero.strip() for hero in player['pool'].split(',')]
                    if set(player_pool) == set(POOL_LIST):
                        pool_text = '–í—Å–µ'
                    elif player['pool'] != '–ù–µ —É–∫–∞–∑–∞–Ω–æ':
                        pool_text = ', '.join(player_pool)
                    else:
                        pool_text = '–ù–µ –≤—ã–±—Ä–∞–Ω'
                else:
                    pool_text = '–ù–µ –≤—ã–±—Ä–∞–Ω'

                rank = player['rank'] if player['rank'] is not None else '–ù–µ —É–∫–∞–∑–∞–Ω'
                subrank = get_roman_numeral(player['subrank']) if player['subrank'] is not None else '–ù–µ —É–∫–∞–∑–∞–Ω'

                player_info = (
                    f"üí¨ <b>–¢–ì:</b> {player_nickname}\n"
                    f"üõ°Ô∏è <b>–†–∞–Ω–≥:</b> {rank} {subrank}\n"
                    f"‚è≥ <b>–ß–∞—Å—ã –≤ –∏–≥—Ä–µ:</b> {player['playtime']}\n"
                    f"ü¶∏‚Äç‚ôÇÔ∏è <b>–ì–µ—Ä–æ–∏:</b> {pool_text}\n"
                )

                if player['status'] == 'captain':
                    captain_info = f"–ö–∞–ø–∏—Ç–∞–Ω:\n{player_info}"
                else:
                    players_info += f"\n{player_info}"

            await update.message.reply_text(
                text=f"<b>–ö–æ–º–∞–Ω–¥–∞</b> {team_number}\n\n{captain_info}{players_info}",
                parse_mode="HTML"
            )
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

######################################################################################################################

def get_roman_numeral(subrank_index):
    if 1 <= subrank_index <= len(roman_numerals):
        return roman_numerals[subrank_index - 1]
    return None

######################################################################################################################

async def enemy_team(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id

    try:
        async with await get_db_connection() as conn:
            user_team_result = await conn.fetchval("SELECT team FROM players WHERE user_id = $1", user_id)
            
            if not user_team_result:
                await update.message.reply_text("–¢—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—à—å –≤ –∫–æ–º–∞–Ω–¥–µ.")
                return

            teams_result = await conn.fetch("SELECT DISTINCT team FROM players WHERE team IS NOT NULL AND team != $1 ORDER BY team ASC", user_team_result)

            if not teams_result:
                await update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.")
                return

            keyboard = [
                [InlineKeyboardButton(f"–ö–æ–º–∞–Ω–¥–∞ {team['team']}", callback_data=f"enemy_{team['team']}")]
                for team in teams_result if team['team'] is not None
            ]

            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text("–í—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É", reply_markup=reply_markup)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–∞–Ω–¥–∞—Ö: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def show_enemy_team(update: Update, context: ContextTypes.DEFAULT_TYPE, team_id: int):
    try:
        team_number = str(team_id)

        async with await get_db_connection() as conn:
            query = """
                SELECT user_id, username, phone, rank, subrank, playtime, pool, status 
                FROM players 
                WHERE team = $1
            """
            players_result = await conn.fetch(query, team_number)

            if not players_result:
                await update.callback_query.answer("–ö–æ–º–∞–Ω–¥–∞ –ø—É—Å—Ç–∞.")
                return

            captain_info = "–ö–∞–ø–∏—Ç–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω."
            players_info = ""

            for player in players_result:
                player_nickname = f"@{player['username']}" if player['username'] else (f"{player['phone']}" if player['phone'] else "–ù–µ —É–∫–∞–∑–∞–Ω–æ.")

                if player['pool']:
                    player_pool = [hero.strip() for hero in player['pool'].split(',')]
                    if set(player_pool) == set(POOL_LIST):
                        pool_text = '–í—Å–µ'
                    elif player['pool'] != '–ù–µ —É–∫–∞–∑–∞–Ω–æ':
                        pool_text = ', '.join(player_pool)
                    else:
                        pool_text = '–ù–µ –≤—ã–±—Ä–∞–Ω'
                else:
                    pool_text = '–ù–µ –≤—ã–±—Ä–∞–Ω'

                player_info = (
                    f"üí¨ <b>–¢–ì:</b> {player_nickname}\n"
                    f"üõ°Ô∏è <b>–†–∞–Ω–≥:</b> {player['rank']} {get_roman_numeral(player['subrank'])}\n"
                    f"‚è≥ <b>–ß–∞—Å—ã –≤ –∏–≥—Ä–µ:</b> {player['playtime']}\n"
                    f"ü¶∏‚Äç‚ôÇÔ∏è <b>–ì–µ—Ä–æ–∏:</b> {pool_text}\n"
                )

                if player['status'] == 'captain':
                    captain_info = f"–ö–∞–ø–∏—Ç–∞–Ω:\n{player_info}"
                else:
                    players_info += f"\n{player_info}"

            await update.callback_query.answer()
            await update.callback_query.edit_message_text(
                text=f"<b>–ö–æ–º–∞–Ω–¥–∞</b> {team_number}\n\n{captain_info}{players_info}",
                parse_mode="HTML"
            )
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–≤: {e}")
        await update.callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

######################################################################################################################

async def swap_player(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.message.from_user.id

        async with await get_db_connection() as conn:
            user_query = "SELECT team FROM players WHERE user_id = $1"
            user_team_result = await conn.fetchval(user_query, user_id)

            if not user_team_result:
                await update.message.reply_text("–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–æ–º–∞–Ω–¥–µ.")
                return

            team_number = str(user_team_result)

            captain_query = "SELECT status FROM players WHERE user_id = $1 AND team = $2"
            user_status = await conn.fetchval(captain_query, user_id, team_number)

            if not user_status or user_status != 'captain':
                await update.message.reply_text("–¢–æ–ª—å–∫–æ –∫–∞–ø–∏—Ç–∞–Ω –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
                return

            query = """
                SELECT user_id, username, phone 
                FROM players 
                WHERE team = $1 AND status != 'captain'
            """
            players_result = await conn.fetch(query, team_number)

            if not players_result:
                await update.message.reply_text("–í –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤.")
                return

            keyboard = []
            for player in players_result:
                player_nickname = player['username'] if player['username'] else player['phone']
                keyboard.append(
                    [InlineKeyboardButton(f"{player_nickname}", callback_data=f"choiceswap_{player['user_id']}_{team_number}")]
                )

            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text("–ö–æ–≥–æ –∑–∞–º–µ–Ω–∏—Ç—å?", reply_markup=reply_markup)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ —Ñ—É–Ω–∫—Ü–∏–∏ swap_player: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def del_player_from_team(user_id):
    try:
        user_id = int(user_id)

        async with await get_db_connection() as conn:
            update_query = """
                UPDATE players 
                SET team = NULL, status = 'close'
                WHERE user_id = $1;
            """
            await conn.execute(update_query, user_id)
            logger.info(f"–ò–≥—Ä–æ–∫ {user_id} —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ–º–∞–Ω–¥—ã.")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫–∞ {user_id}: {e}", exc_info=True)
        raise

async def pick_new_player(update: Update, players, team_id, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    message_target = query.message if query else update.message

    if not players:
        await message_target.edit_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞.")
        return

    player_info_text = ""
    buttons = []

    for index, player in enumerate(players, start=1):
        user_id = player['user_id']
        rank = player['rank']
        subrank = player['subrank']
        playtime = player.get('playtime', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        pool = player.get('pool', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')

        full_rank = f"{rank} {get_roman_numeral(subrank)}"

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º pool
        if pool != '–ù–µ —É–∫–∞–∑–∞–Ω–æ':
            pool_text = ', '.join([hero.strip() for hero in pool.split(',')])
        else:
            pool_text = '–ù–µ –≤—ã–±—Ä–∞–Ω'

        player_info_text += f"‚Äîüõ°Ô∏è <b>–†–∞–Ω–≥:</b> {full_rank}\n"
        player_info_text += f"<b>{index}</b> ‚è≥ <b>–ß–∞—Å—ã –≤ –∏–≥—Ä–µ:</b> {playtime}\n"
        player_info_text += f"‚Äîü¶∏‚Äç‚ôÇÔ∏è <b>–ì–µ—Ä–æ–∏:</b> {pool_text}\n\n"

        button = InlineKeyboardButton(str(index), callback_data=f"swap_{user_id}_{team_id}")
        buttons.append(button)

    keyboard = InlineKeyboardMarkup([buttons])

    await message_target.edit_text(
        f"–í—ã–±–µ—Ä–∏ –∏–≥—Ä–æ–∫–∞ –¥–ª—è —Å–≤–æ–µ–π –∫–æ–º–∞–Ω–¥—ã\n\n{player_info_text}",
        reply_markup=keyboard,
        parse_mode='HTML'
    )

######################################################################################################################

async def swap_captain(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        async with await get_db_connection() as conn:
            user_id = update.message.from_user.id

            user_query = "SELECT team FROM players WHERE user_id = $1"
            user_team_result = await conn.fetchval(user_query, user_id)

            if not user_team_result:
                await update.message.reply_text("–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–æ–º–∞–Ω–¥–µ.")
                return

            team_number = str(user_team_result)

            captain_query = "SELECT status FROM players WHERE user_id = $1 AND team = $2"
            user_status = await conn.fetchval(captain_query, user_id, team_number)

            if not user_status or user_status != 'captain':
                await update.message.reply_text("–¢–æ–ª—å–∫–æ –∫–∞–ø–∏—Ç–∞–Ω –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
                return
            
            query = """
                SELECT user_id, username, phone 
                FROM players 
                WHERE team = $1
            """
            players_result = await conn.fetch(query, team_number)

            if not players_result:
                await update.message.reply_text("–í –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤.")
                return

            keyboard = []
            for player in players_result:
                player_nickname = player['username'] if player['username'] else player['phone']
                keyboard.append(
                    [InlineKeyboardButton(f"{player_nickname}", callback_data=f"swapcaptain_{player['user_id']}_{team_number}")]
                )

            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text("–ö–æ–≥–æ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∫–∞–ø–∏—Ç–∞–Ω–æ–º?", reply_markup=reply_markup)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —Å–º–µ–Ω—ã –∫–∞–ø–∏—Ç–∞–Ω–∞: {e}", exc_info=True)
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —Å–º–µ–Ω—ã –∫–∞–ø–∏—Ç–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.")

async def get_new_captain(user_id, team_id):
    try:
        async with await get_db_connection() as conn:
            user_id = int(user_id)
            team_id = str(team_id)

            current_captain_query = """
                SELECT user_id FROM players 
                WHERE team = $1 AND status = 'captain'
            """
            current_captain = await conn.fetchval(current_captain_query, team_id)
            if current_captain:
                update_captain_query = """
                    UPDATE players 
                    SET status = 'player' 
                    WHERE user_id = $1
                """
                await conn.execute(update_captain_query, current_captain)

            update_new_captain_query = """
                UPDATE players 
                SET status = 'captain' 
                WHERE user_id = $1
            """
            await conn.execute(update_new_captain_query, user_id)

            logger.info(f"–ù–æ–≤—ã–π –∫–∞–ø–∏—Ç–∞–Ω –∫–æ–º–∞–Ω–¥—ã {team_id}: {user_id}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –∫–∞–ø–∏—Ç–∞–Ω–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã {team_id} –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}", exc_info=True)
        raise

######################################################################################################################

async def rename_team(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.message.from_user.id

        async with await get_db_connection() as conn:
            user_query = "SELECT team FROM players WHERE user_id = $1"
            user_team_result = await conn.fetchval(user_query, user_id)

            if not user_team_result:
                await update.message.reply_text("–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–æ–º–∞–Ω–¥–µ.")
                return

            old_team_name = str(user_team_result)

            captain_query = "SELECT status FROM players WHERE user_id = $1 AND team = $2"
            user_status = await conn.fetchval(captain_query, user_id, old_team_name)

            if not user_status or user_status != 'captain':
                await update.message.reply_text("–¢–æ–ª—å–∫–æ –∫–∞–ø–∏—Ç–∞–Ω –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
                return

            context.user_data[WAITING_FOR_NEW_TEAM_NAME] = True
            context.user_data['old_team_name'] = old_team_name

            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã:")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ —Ñ—É–Ω–∫—Ü–∏–∏ rename_team: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def team_name_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã"""
    
    if not context.user_data.get(WAITING_FOR_NEW_TEAM_NAME, False):
        return
    new_team_name = update.message.text

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –ø—Ä–µ–¥–ª–æ–∂–∏–ª –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: {new_team_name}")

    old_team_name = context.user_data['old_team_name']

    context.user_data['new_team_name'] = new_team_name

    try:
        async with await get_db_connection() as conn:
            updated_rows = await conn.execute("""
                UPDATE players
                SET team = $1
                WHERE team = $2
            """, new_team_name, old_team_name)

        updated_rows_count = int(updated_rows.split()[-1]) if updated_rows else 0

        if updated_rows_count > 0:
            logger.info(f"–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ —Å {old_team_name} –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {new_team_name}")

            await update.message.reply_text(f"–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {new_team_name} üéâ")
        else:
            await update.message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã. –í–æ–∑–º–æ–∂–Ω–æ, —Ç–∞–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ —É–∂–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    context.user_data[WAITING_FOR_NEW_TEAM_NAME] = False

######################################################################################################################

async def input_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):

    if context.user_data.get(WAITING_FOR_PHONE, False):
        phone = update.message.text
        context.user_data['phone'] = phone
        context.user_data[WAITING_FOR_PHONE] = False
        await update.message.reply_text("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! üéâ")
        await save_registration_data(update, context)
        return

    if context.user_data.get(WAITING_FOR_NEW_TEAM_NAME, False):
        new_team_name = str(update.message.text)
        old_team_name = str(context.user_data['old_team_name'])

        context.user_data['new_team_name'] = new_team_name

        try:
            async with await get_db_connection() as conn:
                updated_rows = await conn.execute("""
                    UPDATE players
                    SET team = $1
                    WHERE team = $2
                """, new_team_name, old_team_name)

            updated_rows_count = int(updated_rows.split()[-1]) if updated_rows else 0

            if updated_rows_count > 0:
                logger.info(f"–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ —Å {old_team_name} –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {new_team_name}")
                await update.message.reply_text(f"–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {new_team_name} üéâ")
            else:
                await update.message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã. –í–æ–∑–º–æ–∂–Ω–æ, —Ç–∞–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ —É–∂–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

        context.user_data[WAITING_FOR_NEW_TEAM_NAME] = False
        return

    return

######################################################################################################################

async def admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.from_user.id != admin_id:
        return

    admin_commands = (
        "‚öôÔ∏è <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n\n"

        "/reg_start - —Å—Ç–∞—Ä—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π\n"
        "/reg_stop - –∑–∞–∫—Ä—ã—Ç–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π\n\n"

        "/ready_check - –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –Ω–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å\n"
        "/ready_stop - –∑–∞–∫–æ–Ω—á–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å\n\n"

        "/player_summary - –∫–æ–ª-–≤–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π\n\n"

        "/find_captain - –æ—Ç–±–æ—Ä –∫–∞–ø–∏—Ç–∞–Ω–æ–≤\n\n"
        "/start_pick - –Ω–∞–±–æ—Ä –∏–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–∞–Ω–¥—ã\n\n"

        "/tournament_refresh - –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö\n\n"
    )
    
    await update.message.reply_text(admin_commands, parse_mode="HTML")

async def captain(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.message.from_user.id

        async with await get_db_connection() as conn:
            captain_query = "SELECT status FROM players WHERE user_id = $1"
            user_status = await conn.fetchval(captain_query, user_id)

            if not user_status or user_status != 'captain':
                await update.message.reply_text("–¢–æ–ª—å–∫–æ –∫–∞–ø–∏—Ç–∞–Ω –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
                return

            captain_commands = (
                "‚öôÔ∏è <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∫–∞–ø–∏—Ç–∞–Ω–∞:</b>\n\n"

                "/rename_team - –°–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã\n\n"
                "/swap_player - –ó–∞–º–µ–Ω–∏—Ç—å –∏–≥—Ä–æ–∫–∞\n\n"
                "/swap_captain - –ù–∞–∑–Ω–∞—á–∏—Ç—å –Ω–æ–≤–æ–≥–æ –∫–∞–ø–∏—Ç–∞–Ω–∞\n"
            )
    
            await update.message.reply_text(captain_commands, parse_mode="HTML")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –∫–æ–º–∞–Ω–¥—ã captain: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def player_summary(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.from_user.id != admin_id:
        return

    try:
        async with await get_db_connection() as conn:
            query_registered = "SELECT COUNT(*) FROM players WHERE rank IS NOT NULL AND rank != ''"
            registered_count = await conn.fetchval(query_registered)

            query_ready = "SELECT COUNT(*) FROM players WHERE status IN ('ready', 'player', 'captain')"
            ready_count = await conn.fetchval(query_ready)

        message = (
            f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤: {registered_count}\n"
            f"–ì–æ—Ç–æ–≤—ã—Ö –∫ —É—á–∞—Å—Ç–∏—é: {ready_count}"
        )
        await update.message.reply_text(message)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–æ–≤: {e}", exc_info=True)
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–æ–≤.")

######################################################################################################################

async def buttons_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global is_picking
    global swaping
    query = update.callback_query
    await query.answer()
    data = query.data
    logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {query.data}")

    if data in RANKS:
        return await rank_choice(update, context)
    
    elif data.isdigit():
        return await subrank_choice(update, context)
    
    elif data in PLAYTIME_OPTIONS:
        return await playtime_choice(update, context)
    
    elif data in POOL_LIST or data == "next":
        return await pool_choice(update, context)
    
    elif data in ["confirm", "cancel"]:
        return await confirm_choice(update, context)
    
    elif data == "select_all":
        context.user_data['pool'] = POOL_LIST[:]
        await query.message.edit_text("–í—ã–±–µ—Ä–∏ –ø—É–ª:", reply_markup=pool_keyboard(POOL_LIST))
        return
    
    elif data == "clear_all":
        context.user_data['pool'] = []
        await query.message.edit_text("–í—ã–±–µ—Ä–∏ –ø—É–ª:", reply_markup=pool_keyboard([]))
        return
    
    elif data == "back_to_rank":
        context.user_data['rank'] = None
        await query.message.edit_text("–í—ã–±–µ—Ä–∏ —Ä–∞–Ω–≥:", reply_markup=rank_keyboard())
        return
    
    elif data.startswith("teams_"):
        teams_count = int(data.split("_")[1])
        logger.info(f"–ö–æ–º–∞–Ω–¥—ã –≤—ã–±—Ä–∞–Ω—ã: {teams_count}") 
        await search_captains(teams_count, update, context)
        return

    elif data.startswith("accept_"):
        logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É '–ü—Ä–∏–Ω—è—Ç—å' –¥–ª—è –¥–∞–Ω–Ω—ã—Ö: {data}")
        await accept(update, context)
        logger.info(f"–ö–Ω–æ–ø–∫–∞ '–ü—Ä–∏–Ω—è—Ç—å' –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return

    elif data.startswith("decline_"):
        logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É '–û—Ç–∫–∞–∑–∞—Ç—å—Å—è' –¥–ª—è –¥–∞–Ω–Ω—ã—Ö: {data}")
        await decline(update, context)
        logger.info(f"–ö–Ω–æ–ø–∫–∞ '–û—Ç–∫–∞–∑–∞—Ç—å—Å—è' –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return
    
    elif data.startswith("pick_"):
        if is_picking:  
            return

        is_picking = True

        try:
            _, user_id, captain_user_id, team_id = data.split("_")
            user_id = int(user_id)
            captain_user_id = int(captain_user_id)

            if captain_user_id in tasks_by_captain:
                task = tasks_by_captain[captain_user_id]
                if not task.done():
                    task.cancel()

            await update_player_status(user_id, team_id, context)

            try:
                await context.bot.delete_message(chat_id=captain_user_id, message_id=query.message.message_id)
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∏–∫–æ–º: {e}")

            players = await get_best_players()
            await send_player_buttons(update, players, context)

        finally:
            is_picking = False

        return
    
    elif data.startswith("enemy_"):
        team_id = int(data.split("_")[1])
        return await show_enemy_team(update, context, team_id)
    
    elif data.startswith("ready_"):
        parts = data.split("_")
        action = parts[1]
        user_id = int(parts[2])

        logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω user_id: {user_id}")

        if action == "yes":
            message = await ready_check_yes(user_id)
            await query.edit_message_text(message)
            return

        elif action == "no":
            message = await ready_check_no(user_id)
            await query.edit_message_text(message)
            return

    elif data.startswith("choiceswap_"):
        if swaping:  
            return
        
        swaping = True

        try:
            _, user_id, team_id = data.split("_")

            await del_player_from_team(user_id)

            players = await get_best_players()
            await pick_new_player(update, players, team_id, context)

        finally:
            swaping = False
        return

    elif data.startswith("swap_"):
        if swaping:  
            return
        
        try:
            swaping = True

            _, user_id, team_id = data.split("_")

            await update_player_status(user_id, team_id, context)

            await query.message.edit_text("–ò–≥—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ–º–∞–Ω–¥—É.")

        finally:
            swaping = False
        return
    
    elif data.startswith("swapcaptain_"):
        if swaping:  
            return
        
        try:
            swaping = True

            _, user_id, team_id = data.split("_")

            await get_new_captain(user_id, team_id)

            await query.message.edit_text("–ù–æ–≤—ã–π –∫–∞–ø–∏—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω.")

        finally:
            swaping = False
        return

    elif query.data == "confirm_refresh":
        message = await clear_tournament_data()
        await query.edit_message_text(message)
        return

    elif query.data == "cancel_refresh":
        await query.edit_message_text("üö´ –û—Ç–º–µ–Ω–∞. –î–∞–Ω–Ω—ã–µ –Ω–µ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã.")
        return

    logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è callback_data: {data}")
    await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")

def register_handlers(application: Application):
    application.handlers.clear()

    application.add_handler(CommandHandler("start", start))

    application.add_handler(CommandHandler("reg_start", reg_start))
    application.add_handler(CommandHandler("reg", reg))
    application.add_handler(CommandHandler("reg_stop", reg_stop))

    application.add_handler(CommandHandler("ready_check", ready_check))
    application.add_handler(CommandHandler("ready_stop", ready_stop))
    application.add_handler(CommandHandler("find_captain", find_captain))
    application.add_handler(CommandHandler("start_pick", start_pick))
    application.add_handler(CommandHandler("tournament_refresh", tournament_refresh))

    application.add_handler(CommandHandler("my_team", my_team))
    application.add_handler(CommandHandler("enemy_team", enemy_team))
    application.add_handler(CommandHandler("swap_player", swap_player))
    application.add_handler(CommandHandler("swap_captain", swap_captain))
    application.add_handler(CommandHandler("rename_team", rename_team))

    application.add_handler(CommandHandler("admin", admin))
    application.add_handler(CommandHandler("captain", captain))
    application.add_handler(CommandHandler("player_summary", player_summary))

    application.add_handler(CallbackQueryHandler(buttons_handler, block=False))
    
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, input_handler))

def main():
    application = Application.builder().token("").build()
    register_handlers(application)
    application.run_polling()

if __name__ == '__main__':
    main()
