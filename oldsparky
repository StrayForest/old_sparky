import asyncio
import json
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    Application, CallbackContext, CommandHandler, CallbackQueryHandler, ConversationHandler, ContextTypes, MessageHandler, filters
)
import logging
import asyncpg

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

with open('config.json', 'r') as f:
    config = json.load(f)
DB_CONFIG = config['postgresql']

RANK, SUBRANK, PLAYTIME, POOL, CONFIRM, PHONE = range(6)
PLAYTIME_OPTIONS = ["0-100", "101-300", "301-500", "501-700", "701-1000", "1000+"]
roman_numerals = ['I', 'II', 'III', 'IV', 'V', 'VI']

RANKS = [
    "–≠—Ç–µ—Ä–Ω—É—Å", "–í–ª–∞–¥—ã–∫–∞", "–§–∞–Ω—Ç–æ–º", "–û—Ä–∞–∫—É–ª", "–ê—Ä—Ö–æ–Ω—Ç", "–≠–º–∏—Å—Å–∞—Ä",
    "–†–∏—Ç—É–∞–ª–∏—Å—Ç", "–ß–∞—Ä–æ–¥–µ–π", "–ê–ª—Ö–∏–º–∏–∫", "–ò—Å–∫–∞—Ç–µ–ª—å", "–ü–æ—Å–ª—É—à–Ω–∏–∫"
]

POOL_LIST = [
    "Abrams", "Bebop", "Dynamo", "Grey Talon", "Haze", "Infernus",
    "Ivy", "Kelvin", "Lady Geist", "Lash", "McGinnis", "Mo & Krill",
    "Paradox", "Pocket", "Seven", "Vindicta", "Warden", "Wraith",
    "Yamato", "Viscous", "Shiv", "Holliday", "Kali", "Calico", "Mirage"
]

async def get_db_connection():
    try:
        conn = await asyncpg.connect(
            user=DB_CONFIG['user'],
            password=DB_CONFIG['password'],
            database=DB_CONFIG['database'],
            host=DB_CONFIG['host'],
            port=DB_CONFIG['port']
        )
        return conn
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise
async def close_db_connection(conn):
    try:
        await conn.close()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î: {e}")

######################################################################################################################

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    username = update.effective_user.username

    conn = None
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = await get_db_connection()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º user_id
        existing_user = await conn.fetchrow("""
            SELECT 1 FROM players WHERE user_id = $1
        """, user_id)

        if not existing_user:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ
            await conn.execute("""
                INSERT INTO players (user_id, username) 
                VALUES ($1, $2)
            """, user_id, username)
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")
        else:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        if conn:
            await close_db_connection(conn)

    # –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    welcome_text = (
        "–ü—Ä–∏–≤–µ—Ç! üëã\n\n"
        "–¢—ã –ø–æ–ø–∞–ª –≤ —Å–∏—Å—Ç–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ —Ç—É—Ä–Ω–∏—Ä –æ—Ç OldSparky! üèÜ\n\n"
        "–ß—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, –Ω–∞–∂–º–∏ –∫–æ–º–∞–Ω–¥—É /reg.\n"
    )
    await update.message.reply_text(welcome_text, parse_mode='HTML')

async def reg(update: Update, context: CallbackContext):
    user_id = update.effective_user.id

    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–∑–¥–µ—Å—å –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏–º–µ—Ä)
        conn = await get_db_connection()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ —Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Ä–∞–Ω–≥–æ–º
        existing_user = await conn.fetchrow("SELECT * FROM players WHERE user_id = $1", user_id)
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        await conn.close()

        # –ï—Å–ª–∏ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –Ω–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        context.user_data.clear()  # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        keyboard = rank_keyboard()  # –í–∞—à –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ —Å–≤–æ–π —Ä–∞–Ω–≥", reply_markup=keyboard)
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.")

def rank_keyboard():
    """–°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º —Ä–∞–Ω–≥–∞"""
    keyboard = [[InlineKeyboardButton(rank, callback_data=rank)] for rank in RANKS]
    return InlineKeyboardMarkup(keyboard)

async def rank_choice(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ä–∞–Ω–≥–∞"""
    query = update.callback_query
    await query.answer()
    
    selected_rank = query.data
    context.user_data['rank'] = selected_rank
    
    keyboard = subrank_keyboard(selected_rank)
    await query.message.edit_text("–í—ã–±–µ—Ä–∏ –ø–æ–¥—Ä–∞–Ω–≥", reply_markup=InlineKeyboardMarkup(keyboard))

def subrank_keyboard(selected_rank):
    """–°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–¥—Ä–∞–Ω–≥–∞–º–∏"""
    keyboard = [
        [InlineKeyboardButton(f"{selected_rank} {roman}", callback_data=str(index + 1))]
        for index, roman in enumerate(roman_numerals)
    ]
    keyboard.append([InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_rank")])
    
    return keyboard

async def subrank_choice(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –ø–æ–¥—Ä–∞–Ω–≥–∞"""
    query = update.callback_query
    await query.answer()
    
    try:
        selected_subrank = int(query.data)
        context.user_data['subrank'] = selected_subrank
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏ –∏–≥—Ä—ã
        await query.message.edit_text("–í—ã–±–µ—Ä–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –≤ –∏–≥—Ä–µ", reply_markup=playtime_keyboard())
    
    except ValueError:
        logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥—Ä–∞–Ω–≥–∞: {query.data}")
        await query.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")

def playtime_keyboard():
    """–°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –∏–≥—Ä—ã"""
    keyboard = [[InlineKeyboardButton(option, callback_data=option)] for option in PLAYTIME_OPTIONS]
    return InlineKeyboardMarkup(keyboard)

async def playtime_choice(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –∏–≥—Ä—ã"""
    query = update.callback_query
    await query.answer()
    
    context.user_data['playtime'] = query.data
    context.user_data['pool'] = []
    keyboard = pool_keyboard([])  # –ü—É—Å—Ç–æ–π –ø—É–ª –Ω–∞ —Å—Ç–∞—Ä—Ç–µ
    await query.message.edit_text("–í—ã–±–µ—Ä–∏ –ø—É–ª –≥–µ—Ä–æ–µ–≤ –∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É '–î–∞–ª–µ–µ'", reply_markup=keyboard)

def pool_keyboard(selected_pool):
    """–°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –≥–µ—Ä–æ–µ–≤ –∏–∑ –ø—É–ª–∞"""
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –í—ã–±—Ä–∞—Ç—å –≤—Å–µ", callback_data="select_all"),
            InlineKeyboardButton("‚ùå –û—á–∏—Å—Ç–∏—Ç—å", callback_data="clear_all")
        ]
    ]
    for i in range(0, len(POOL_LIST), 3):
        row = [
            InlineKeyboardButton(f"‚úÖ {hero}" if hero in selected_pool else hero, callback_data=hero)
            for hero in POOL_LIST[i:i+3]
        ]
        keyboard.append(row)

    keyboard.append([InlineKeyboardButton("üöÄ –î–∞–ª–µ–µ", callback_data="next")])
    return InlineKeyboardMarkup(keyboard)

async def pool_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    selected_hero = query.data
    if selected_hero == "next":
        pool = context.user_data.get('pool', [])
        if not pool:
            await query.message.edit_text("–í—ã–±–µ—Ä–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –≥–µ—Ä–æ—è!", reply_markup=pool_keyboard(pool))
            return  # –û–∂–∏–¥–∞–µ–º –≤—ã–±–æ—Ä —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –≥–µ—Ä–æ—è
        return await confirm_registration(update, context)  # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω—ã –≥–µ—Ä–æ–∏, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—É–ª –≥–µ—Ä–æ–µ–≤ –∏–∑ user_data, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç - —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
    pool = context.user_data.get('pool', [])

    # –ï—Å–ª–∏ –≥–µ—Ä–æ–π —É–∂–µ –≤ –ø—É–ª–µ, —É–±–∏—Ä–∞–µ–º –µ–≥–æ, –µ—Å–ª–∏ –Ω–µ—Ç - –¥–æ–±–∞–≤–ª—è–µ–º
    if selected_hero in pool:
        pool.remove(selected_hero)
    else:
        pool.append(selected_hero)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–π –ø—É–ª –æ–±—Ä–∞—Ç–Ω–æ –≤ user_data
    context.user_data['pool'] = pool
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º –≤—ã–±–æ—Ä–æ–º
    keyboard = pool_keyboard(pool)
    await query.message.edit_text("–í—ã–±–µ—Ä–∏ –ø—É–ª:", reply_markup=keyboard)

async def confirm_registration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = context.user_data

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Ä–∞–Ω–≥
    rank = data.get('rank', '–ù–µ –≤—ã–±—Ä–∞–Ω–æ')
    subrank_index = data.get('subrank', None)

    if subrank_index is not None:
        subrank = roman_numerals[subrank_index - 1]  # –£—á–∏—Ç—ã–≤–∞–µ–º, —á—Ç–æ subrank –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 1
        full_rank = f"{rank} {subrank}"
    else:
        full_rank = rank

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    playtime = data.get('playtime', '–ù–µ –≤—ã–±—Ä–∞–Ω–æ')
    pool = data.get('pool', [])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω—ã –ª–∏ –≤—Å–µ –≥–µ—Ä–æ–∏
    if pool == POOL_LIST:
        pool_text = '–í—Å–µ'
    else:
        pool_text = ', '.join(pool) if pool else '–ù–µ –≤—ã–±—Ä–∞–Ω–æ'

    confirmation_text = (
        f"‚ú® <b>–¢–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ:</b>\n\n"
        f"üõ°Ô∏è <b>–†–∞–Ω–≥:</b> {full_rank}\n"
        f"‚è≥ <b>–ß–∞—Å—ã –≤ –∏–≥—Ä–µ:</b> {playtime}\n"
        f"ü¶∏‚Äç‚ôÇÔ∏è <b>–ì–µ—Ä–æ–∏:</b> {pool_text}\n\n"
        f"<i>–ï—Å–ª–∏ –≤—Å–µ –≤–µ—Ä–Ω–æ, –Ω–∞–∂–º–∏ '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'.</i>"
    )

    keyboard = InlineKeyboardMarkup([ 
        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
    ])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    query = update.callback_query
    await query.message.edit_text(confirmation_text, reply_markup=keyboard, parse_mode='HTML')

    return CONFIRM

async def confirm_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "cancel":
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –æ—Ç–º–µ–Ω–∏–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.")
        await query.message.edit_text("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")

    elif query.data == "confirm":
        username = update.effective_user.username

        if not username:
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –Ω–µ —É–∫–∞–∑–∞–ª –Ω–∏–∫–Ω–µ–π–º –≤ Telegram.")
            await query.message.reply_text("–£ —Ç–µ–±—è –Ω–µ—Ç –Ω–∏–∫–∞ –≤ Telegram.\n–£–∫–∞–∂–∏ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏:")
            return PHONE

        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            await save_registration_data(update, context)
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
            await query.message.reply_text("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! üéâ", parse_mode='HTML')
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}: {e}")
            await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
        
async def phone_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    phone = update.message.text
    user_id = update.effective_user.id

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ context.user_data
    context.user_data['phone'] = phone
    
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await save_registration_data(update, context)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {phone}.")
        await update.message.reply_text("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! üéâ", parse_mode='HTML')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")

async def save_registration_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    data = context.user_data
    pool_str = ','.join(data.get('pool', [])) if data.get('pool') else None
    phone = data.get('phone', None)

    logger.info(f"Saving data for user_id: {user_id}, rank: {data.get('rank')}, subrank: {data.get('subrank')}, "
                f"playtime: {data.get('playtime')}, pool: {pool_str}, phone: {phone}")

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        conn = await get_db_connection()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        user_check_query = "SELECT user_id FROM players WHERE user_id = $1"
        user_exists = await conn.fetch(user_check_query, user_id)

        if not user_exists:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
            logger.info(f"User {user_id} not found in the database. Adding new record.")
            await conn.execute("""
                INSERT INTO players (user_id, rank, subrank, playtime, pool, phone)
                VALUES ($1, $2, $3, $4, $5, $6)
            """, user_id, data.get('rank'), data.get('subrank'), data.get('playtime'), pool_str, phone)
        else:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –¥–∞–Ω–Ω—ã–µ
            logger.info(f"User {user_id} found in the database. Updating record.")
            await conn.execute("""
                UPDATE players
                SET rank = $1, subrank = $2, playtime = $3, pool = $4, phone = $5
                WHERE user_id = $6
            """, data.get('rank'), data.get('subrank'), data.get('playtime'), pool_str, phone, user_id)

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        await conn.close()

    except Exception as e:
        logger.error(f"Database error while saving data for user_id {user_id}: {e}")
        raise  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –±—ã–ª–æ –ø–æ–Ω—è—Ç–Ω–æ, —á—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {context.error}")

######################################################################################################################

async def tournament_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥ –∏ –∏—â–µ—Ç –∫–∞–ø–∏—Ç–∞–Ω–æ–≤, –Ω–∞–∑–Ω–∞—á–∞—è –∏—Ö."""
    keyboard = [
        [InlineKeyboardButton("2", callback_data="teams_2")],
        [InlineKeyboardButton("4", callback_data="teams_4")],
        [InlineKeyboardButton("8", callback_data="teams_8")],
        [InlineKeyboardButton("16", callback_data="teams_16")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞", reply_markup=reply_markup)

async def search_captains(teams_count, update, context):
    """–ò—â–µ—Ç –∫–∞–ø–∏—Ç–∞–Ω–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—å –∫–∞–ø–∏—Ç–∞–Ω–∞–º–∏."""
    logger.info(f"–ò—â–µ–º –∫–∞–ø–∏—Ç–∞–Ω–æ–≤ –¥–ª—è {teams_count} –∫–æ–º–∞–Ω–¥.")
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–∞–ø–∏—Ç–∞–Ω–æ–≤
    captains = await get_candidates_for_captain(teams_count)

    if not captains:
        await update.callback_query.edit_message_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤.")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—å –∫–∞–ø–∏—Ç–∞–Ω–∞–º–∏
    await send_captain_offers(captains, update, context)

    # –ñ–¥–µ–º 60 —Å–µ–∫—É–Ω–¥ –Ω–∞ –æ—Ç–≤–µ—Ç
    await asyncio.sleep(10)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –Ω–∞—Ö–æ–¥–∏–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∫–∞–ø–∏—Ç–∞–Ω–æ–≤
    await fill_missing_captains(teams_count, update, context)

    # –ö–æ–≥–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ø–∏—Ç–∞–Ω–æ–≤ —Ä–∞–≤–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫–æ–º–∞–Ω–¥, —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–º–µ—Ä–∞ –∫–æ–º–∞–Ω–¥
    await assign_team_numbers_and_notify(update, context, teams_count)

async def get_candidates_for_captain(teams_count):
    conn = await get_db_connection()
    try:
        query = """
            SELECT user_id, rank, COALESCE(subrank, 0) AS subrank 
            FROM players 
            WHERE status IS NULL OR status = '' 
            ORDER BY ARRAY_POSITION($1::text[], rank), subrank DESC 
            LIMIT $2;
        """
        # –ü–µ—Ä–µ–¥–∞–µ–º –≤ –∑–∞–ø—Ä–æ—Å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: –º–∞—Å—Å–∏–≤ RANKS –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥
        return await conn.fetch(query, RANKS, teams_count)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: {e}")
        return []
    finally:
        await conn.close()

async def send_captain_offers(captains, update, context):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å—Ç–∞—Ç—å –∫–∞–ø–∏—Ç–∞–Ω–∞–º–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∏–≥—Ä–æ–∫–∞–º."""
    for captain in captains:
        user_id = captain['user_id']
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("–ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_{user_id}")],
            [InlineKeyboardButton("–û—Ç–∫–∞–∑–∞—Ç—å—Å—è", callback_data=f"decline_{user_id}")]
        ])
        
        try:
            message = await context.bot.send_message(
                chat_id=user_id,
                text="–¢—ã –≤—ã–±—Ä–∞–Ω –∫–∞–ø–∏—Ç–∞–Ω–æ–º. –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É!",
                reply_markup=keyboard
            )
            print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {message.message_id}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

async def fill_missing_captains(teams_count, update, context):
    """–ï—Å–ª–∏ –∫–∞–ø–∏—Ç–∞–Ω–æ–≤ –º–µ–Ω—å—à–µ, —á–µ–º –∫–æ–º–∞–Ω–¥, –∏—â–µ–º —Å–ª–µ–¥—É—é—â–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤."""
    conn = await get_db_connection()
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ø–∏—Ç–∞–Ω–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        captain_count = await conn.fetchval("SELECT COUNT(*) FROM players WHERE status = 'captain';")
        logger.info(f"–¢–µ–∫—É—â–∏–µ –∫–∞–ø–∏—Ç–∞–Ω—ã: {captain_count}")

        # –ü–æ–∫–∞ –∫–∞–ø–∏—Ç–∞–Ω–æ–≤ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –∏—â–µ–º —Å–ª–µ–¥—É—é—â–∏—Ö
        while captain_count < teams_count:
            logger.info(f"–ö–∞–ø–∏—Ç–∞–Ω–æ–≤ –º–µ–Ω—å—à–µ —á–µ–º –∫–æ–º–∞–Ω–¥, –∏—â–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞. –¢—Ä–µ–±—É–µ—Ç—Å—è: {teams_count}, –Ω–∞–π–¥–µ–Ω–æ: {captain_count}")
            
            # –ò—â–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ —Å –ø—É—Å—Ç—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
            query = """
                SELECT user_id 
                FROM players 
                WHERE status IS NULL OR status = '' 
                ORDER BY ARRAY_POSITION($1::text[], rank), subrank DESC 
                LIMIT 1;
            """
            # –ü–µ—Ä–µ–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
            next_captain = await conn.fetchrow(query, RANKS)

            if not next_captain:
                # –õ–æ–≥–∏—Ä—É–µ–º, –µ—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –¥–ª—è –∫–∞–ø–∏—Ç–∞–Ω–∞. –¢—Ä–µ–±—É–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ø–∏—Ç–∞–Ω–æ–≤: {teams_count}")
                await context.bot.send_message(
                    update.message.chat.id,
                    f"–ù–µ –¥–æ—Å—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è {teams_count} –∫–∞–ø–∏—Ç–∞–Ω–æ–≤.",
                )
                break  # –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤, –≤—ã—Ö–æ–¥–∏–º

            user_id = next_captain['user_id']
            logger.info(f"–ù–∞–∑–Ω–∞—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∫–∞–ø–∏—Ç–∞–Ω–æ–º.")

            keyboard = [
                [InlineKeyboardButton("–ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_{user_id}")],
                [InlineKeyboardButton("–û—Ç–∫–∞–∑–∞—Ç—å—Å—è", callback_data=f"decline_{user_id}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º —Å—Ç–∞—Ç—å –∫–∞–ø–∏—Ç–∞–Ω–æ–º.")
            await context.bot.send_message(
                user_id,
                f"–¢—ã –≤—ã–±—Ä–∞–Ω –∫–∞–ø–∏—Ç–∞–Ω–æ–º.",
                reply_markup=reply_markup
            )

            await update_player_status(user_id, 'weight_captain_confirm')

            # –ñ–¥–µ–º 60 —Å–µ–∫—É–Ω–¥
            logger.info(f"–û–∂–∏–¥–∞–µ–º 60 —Å–µ–∫—É–Ω–¥, —á—Ç–æ–±—ã –¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–≤–µ—Ç.")
            await asyncio.sleep(60)

            # –ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ø–∏—Ç–∞–Ω–æ–≤
            captain_count = await conn.fetchval("SELECT COUNT(*) FROM players WHERE status = 'captain';")
            logger.info(f"–ü–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ø–∏—Ç–∞–Ω–æ–≤: {captain_count}")

    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        logger.info("–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.")
        await conn.close()

async def assign_team_numbers_and_notify(update, context, teams_count):
    """–ö–æ–≥–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ø–∏—Ç–∞–Ω–æ–≤ —Ä–∞–≤–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫–æ–º–∞–Ω–¥, –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä–∞ –∫–æ–º–∞–Ω–¥ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."""
    conn = await get_db_connection()
    print("–ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º —Ü–∏—Ñ—Ä—ã –∫–∞–ø–∏—Ç–∞–Ω–∞–º")
    try:
        query = f"SELECT user_id FROM players WHERE status = 'captain';"
        captains = await conn.fetch(query)

        # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –∫–∞–ø–∏—Ç–∞–Ω–∞–º –Ω–æ–º–µ—Ä–∞ –∫–æ–º–∞–Ω–¥ –æ—Ç 1 –¥–æ teams_count
        for i, captain in enumerate(captains, 1):
            print("–ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º —Ü–∏—Ñ—Ä—ã –∫–∞–ø–∏—Ç–∞–Ω–∞–º –≤ —Ü–∏–∫–ª–µ")
            user_id = captain['user_id']
            await update_player_status(user_id, 'captain', i)  # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã
            await context.bot.send_message(user_id, f"–¢—ã —Å—Ç–∞–ª –∫–∞–ø–∏—Ç–∞–Ω–æ–º –∫–æ–º–∞–Ω–¥—ã {i}!")

        await update.callback_query.edit_message_text(f"–ö–∞–ø–∏—Ç–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –¥–ª—è –∫–æ–º–∞–Ω–¥.")

    finally:
        await conn.close()

async def update_player_status(user_id, status, team_number=None):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∏–≥—Ä–æ–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ—Ç –Ω–æ–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è."""
    conn = await get_db_connection()
    print("–æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å")
    try:
        if status == 'captain' and team_number is not None:
            query = f"""
                UPDATE players 
                SET status = 'captain', team = {team_number} 
                WHERE user_id = {user_id};
            """
        else:
            query = f"UPDATE players SET status = '{status}' WHERE user_id = {user_id};"
        await conn.execute(query)
        print('—Å—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω')
    finally:
        await conn.close()

async def accept(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–∞–∑–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–∏–Ω—è—Ç–∏–µ –∫–∞–ø–∏—Ç–∞–Ω—Å—Ç–≤–∞ –æ—Ç {query.from_user.id}. –î–∞–Ω–Ω—ã–µ: {query.data}")

        _, user_id = query.data.split('_')
        user_id = int(user_id)

        # –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏–≥—Ä–æ–∫–∞
        logger.info(f"–û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ 'captain'.")
        await update_player_status(user_id, 'captain')

        # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –æ —Ç–æ–º, —á—Ç–æ –æ–Ω —Å—Ç–∞–ª –∫–∞–ø–∏—Ç–∞–Ω–æ–º.")
        await query.edit_message_text("–í—ã —Å—Ç–∞–ª–∏ –∫–∞–ø–∏—Ç–∞–Ω–æ–º!")
    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∫–∞–ø–∏—Ç–∞–Ω—Å—Ç–≤–∞: {e}")
        await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

async def decline(update: Update, _):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–∫–∞–∑ –æ—Ç –∫–∞–ø–∏—Ç–∞–Ω—Å—Ç–≤–∞."""
    query = update.callback_query
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–∞–∑–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–∫–∞–∑ –æ—Ç –∫–∞–ø–∏—Ç–∞–Ω—Å—Ç–≤–∞ –æ—Ç {query.from_user.id}. –î–∞–Ω–Ω—ã–µ: {query.data}")

        _, user_id = query.data.split('_')
        user_id = int(user_id)

        # –õ–æ–≥–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        logger.info(f"–û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ 'cancel'.")
        await update_player_status(user_id, 'cancel')

        # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –æ —Ç–æ–º, —á—Ç–æ –æ–Ω –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –∫–∞–ø–∏—Ç–∞–Ω—Å—Ç–≤–∞.")
        await query.edit_message_text(text="–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∫–∞–ø–∏—Ç–∞–Ω–∞.")
    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–∞–∑–µ –æ—Ç –∫–∞–ø–∏—Ç–∞–Ω—Å—Ç–≤–∞ –¥–ª—è user_id {user_id}: {e}")
        await query.edit_message_text(text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

######################################################################################################################

async def buttons_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {query.data}")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ —Ä–∞–Ω–≥–∞
    if data in RANKS:
        return await rank_choice(update, context)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ä–∞–Ω–≥–æ–≤ (—á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ 6)
    elif data.isdigit():  # –ü–æ–¥—Ä–∞–Ω–≥–∏ (—á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ 6)
        return await subrank_choice(update, context)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –∏–≥—Ä—ã
    elif data in PLAYTIME_OPTIONS:
        return await playtime_choice(update, context)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥–µ—Ä–æ—è –∏–∑ –ø—É–ª–∞ –∏–ª–∏ –Ω–∞–∂–∞—Ç–∏—è "next"
    elif data in POOL_LIST or data == "next":
        return await pool_choice(update, context)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–º–µ–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    elif data in ["confirm", "cancel"]:
        return await confirm_choice(update, context)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ "–í—ã–±—Ä–∞—Ç—å –≤—Å–µ" –∏ "–û—á–∏—Å—Ç–∏—Ç—å"
    elif data == "select_all":
        context.user_data['pool'] = POOL_LIST[:]  # –í—ã–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö –≥–µ—Ä–æ–µ–≤
        await query.message.edit_text("–í—ã–±–µ—Ä–∏ –ø—É–ª:", reply_markup=pool_keyboard(POOL_LIST))
        return
    
    elif data == "clear_all":
        context.user_data['pool'] = []  # –û—á–∏—â–∞–µ–º –ø—É–ª
        await query.message.edit_text("–í—ã–±–µ—Ä–∏ –ø—É–ª:", reply_markup=pool_keyboard([]))
        return
    
    elif data == "back_to_rank":
        context.user_data['rank'] = None
        await query.message.edit_text("–í—ã–±–µ—Ä–∏ —Ä–∞–Ω–≥:", reply_markup=rank_keyboard())
        return RANK  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ –≤—ã–±–æ—Ä —Ä–∞–Ω–≥–∞
    
    elif data.startswith("teams_"):
        teams_count = int(data.split("_")[1])
        logger.info(f"–ö–æ–º–∞–Ω–¥—ã –≤—ã–±—Ä–∞–Ω—ã: {teams_count}") 
        await search_captains(teams_count, update, context)
        return  # –î–æ–±–∞–≤–ª—è–µ–º return, —á—Ç–æ–±—ã –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª—Å—è –∫–æ–¥ –¥–∞–ª—å—à–µ

    elif data.startswith("accept_"):
        logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É '–ü—Ä–∏–Ω—è—Ç—å' –¥–ª—è –¥–∞–Ω–Ω—ã—Ö: {data}")
        await accept(update, context)
        logger.info(f"–ö–Ω–æ–ø–∫–∞ '–ü—Ä–∏–Ω—è—Ç—å' –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return

    elif data.startswith("decline_"):
        logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É '–û—Ç–∫–∞–∑–∞—Ç—å—Å—è' –¥–ª—è –¥–∞–Ω–Ω—ã—Ö: {data}")
        await decline(update, context)
        logger.info(f"–ö–Ω–æ–ø–∫–∞ '–û—Ç–∫–∞–∑–∞—Ç—å—Å—è' –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return

    # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
    logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è callback_data: {data}")
    await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")

def register_handlers(application: Application):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏."""
    application.handlers.clear()
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ –∫–Ω–æ–ø–æ–∫
    application.add_handler(CommandHandler("start", start))  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    application.add_handler(CommandHandler("reg", reg))
    application.add_handler(CommandHandler("tournament_start", tournament_start))  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /tournament_start
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ (–≤–∫–ª—é—á–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –≤—ã–±–æ—Ä—ã –∏ —Ç.–¥.)
    application.add_handler(CallbackQueryHandler(buttons_handler, block=False))  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –∫–Ω–æ–ø–æ–∫
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, phone_choice))

def main():
    application = Application.builder().token("7510014005:AAHxbLaHcWlDEx95MkHsqc_y2mrX6NStYU4").build()
    register_handlers(application)
    application.run_polling()

if __name__ == '__main__':
    main()
