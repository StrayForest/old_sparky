
import json
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler, ConversationHandler, ContextTypes, MessageHandler, filters
)
import logging
import asyncpg

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

with open('config.json', 'r') as f:
    config = json.load(f)
DB_CONFIG = config['postgresql']

RANK, SUBRANK, PLAYTIME, POOL, CONFIRM, PHONE = range(6)
PLAYTIME_OPTIONS = ["0-100", "101-300", "301-500", "501-700", "701-1000", "1000+"]
roman_numerals = ['I', 'II', 'III', 'IV', 'V', 'VI']

RANKS = [
    "–≠—Ç–µ—Ä–Ω—É—Å", "–í–ª–∞–¥—ã–∫–∞", "–§–∞–Ω—Ç–æ–º", "–û—Ä–∞–∫—É–ª", "–ê—Ä—Ö–æ–Ω—Ç", "–≠–º–∏—Å—Å–∞—Ä",
    "–†–∏—Ç—É–∞–ª–∏—Å—Ç", "–ß–∞—Ä–æ–¥–µ–π", "–ê–ª—Ö–∏–º–∏–∫", "–ò—Å–∫–∞—Ç–µ–ª—å", "–ü–æ—Å–ª—É—à–Ω–∏–∫"
]

POOL_LIST = [
    "Abrams", "Bebop", "Dynamo", "Grey Talon", "Haze", "Infernus",
    "Ivy", "Kelvin", "Lady Geist", "Lash", "McGinnis", "Mo & Krill",
    "Paradox", "Pocket", "Seven", "Vindicta", "Warden", "Wraith",
    "Yamato", "Viscous", "Shiv", "Holliday", "Kali", "Calico", "Mirage"
]

async def get_db_connection():
    try:
        conn = await asyncpg.connect(
            user=DB_CONFIG['user'],
            password=DB_CONFIG['password'],
            database=DB_CONFIG['database'],
            host=DB_CONFIG['host'],
            port=DB_CONFIG['port']
        )
        return conn
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise
async def close_db_connection(conn):
    try:
        await conn.close()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î: {e}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    username = update.effective_user.username

    conn = None
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = await get_db_connection()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º user_id
        existing_user = await conn.fetchrow("""
            SELECT 1 FROM players WHERE user_id = $1
        """, user_id)

        if not existing_user:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ
            await conn.execute("""
                INSERT INTO players (user_id, username) 
                VALUES ($1, $2)
            """, user_id, username)
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")
        else:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        if conn:
            await close_db_connection(conn)

    # –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    welcome_text = (
        "–ü—Ä–∏–≤–µ—Ç! üëã\n\n"
        "–¢—ã –ø–æ–ø–∞–ª –≤ —Å–∏—Å—Ç–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ —Ç—É—Ä–Ω–∏—Ä –æ—Ç OldSparky! üèÜ\n\n"
        "–ß—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, –Ω–∞–∂–º–∏ –∫–æ–º–∞–Ω–¥—É /reg.\n"
    )
    await update.message.reply_text(welcome_text, parse_mode='HTML')

async def reg(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = await get_db_connection()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ —Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Ä–∞–Ω–≥–æ–º
        existing_user = await conn.fetchrow("SELECT * FROM players WHERE user_id = $1", user_id)
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        await conn.close()

        #if existing_user and existing_user.get('rank'):  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —É –Ω–µ–≥–æ –µ—Å—Ç—å —Ä–∞–Ω–≥
            #await update.message.reply_text("–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω! üéâ")
            #return ConversationHandler.END
        
        # –ï—Å–ª–∏ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –Ω–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        context.user_data.clear()  # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        keyboard = rank_keyboard()  # –í–∞—à –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ —Å–≤–æ–π —Ä–∞–Ω–≥", reply_markup=keyboard)
        
        return RANK  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    
    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.")
        return ConversationHandler.END

def rank_keyboard():
    keyboard = [[InlineKeyboardButton(rank, callback_data=rank)] for rank in RANKS]
    return InlineKeyboardMarkup(keyboard)

async def rank_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–∞–Ω–≥
    selected_rank = query.data
    context.user_data['rank'] = selected_rank
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø–æ–¥—Ä–∞–Ω–≥–æ–≤
    try:
        keyboard = subrank_keyboard(selected_rank, roman_numerals)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –ø–æ–¥—Ä–∞–Ω–≥–∞
        await query.message.edit_text(
            query.message.text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return SUBRANK

    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ —Ä–∞–Ω–≥–∞: {e}")
        await query.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")
        return ConversationHandler.END

def subrank_keyboard(selected_rank, roman_numerals):
    keyboard = [
        [InlineKeyboardButton(f"{selected_rank} {roman}", callback_data=str(index + 1))]
        for index, roman in enumerate(roman_numerals)
    ]
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    keyboard.append([InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_rank")])
    
    return keyboard  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–º–µ–Ω–Ω–æ —Å–ø–∏—Å–æ–∫ —Å–ø–∏—Å–∫–æ–≤ –∫–Ω–æ–ø–æ–∫

async def subrank_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —á–∏—Å–ª–æ, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞—è, —á—Ç–æ —ç—Ç–æ –ø–æ–¥—Ä–∞–Ω–≥
        selected_subrank = int(query.data)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥—Ä–∞–Ω–≥
        context.user_data['subrank'] = selected_subrank

        # –û—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
        await query.message.edit_text("–ö–æ–ª-–≤–æ —á–∞—Å–æ–≤ –≤ –∏–≥—Ä–µ", reply_markup=playtime_keyboard())  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
        return PLAYTIME

    except ValueError:
        # –í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —á–∏—Å–ª–æ, –≤—ã–≤–æ–¥–∏–º –æ—à–∏–±–∫—É
        logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥—Ä–∞–Ω–≥–∞: {query.data}")
        await query.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")
        return ConversationHandler.END

    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –∏ –≤—ã–≤–æ–¥–∏–º –æ—à–∏–±–∫—É –≤ —Å–ª—É—á–∞–µ –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–æ–¥—Ä–∞–Ω–≥–∞: {e}")
        await query.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")
        return ConversationHandler.END

def playtime_keyboard():
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ –∏–≥—Ä—ã
    keyboard = [[InlineKeyboardButton(option, callback_data=option)] for option in PLAYTIME_OPTIONS]
    
    return InlineKeyboardMarkup(keyboard)

async def playtime_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data['playtime'] = query.data
    context.user_data['pool'] = []
    keyboard = pool_keyboard([])
    await query.message.edit_text("–í—ã–±–µ—Ä–∏ –ø—É–ª –≥–µ—Ä–æ–µ–≤ –∏ –∂–º–∏ –∫–Ω–æ–ø–∫—É '–î–∞–ª–µ–µ'", reply_markup=keyboard)
    return POOL

def pool_keyboard(selected_pool):
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –í—ã–±—Ä–∞—Ç—å –≤—Å–µ", callback_data="select_all"),
            InlineKeyboardButton("‚ùå –û—á–∏—Å—Ç–∏—Ç—å", callback_data="clear_all")
        ]
    ]

    for i in range(0, len(POOL_LIST), 3):
        row = [
            InlineKeyboardButton(f"‚úÖ {hero}" if hero in selected_pool else hero, callback_data=hero)
            for hero in POOL_LIST[i:i+3]
        ]
        keyboard.append(row)

    keyboard.append([InlineKeyboardButton("üöÄ –î–∞–ª–µ–µ", callback_data="next")])
    return InlineKeyboardMarkup(keyboard)

async def pool_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    selected_hero = query.data
    pool = context.user_data.get('pool', [])

    if selected_hero == "next":
        if not pool:
            await query.message.edit_text("–í—ã–±–µ—Ä–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –≥–µ—Ä–æ—è!", reply_markup=pool_keyboard(pool))
            return  
        return await confirm_registration(update, context)

    if selected_hero == "select_all":
        context.user_data['pool'] = POOL_LIST[:]  # –í—ã–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö –≥–µ—Ä–æ–µ–≤
    elif selected_hero == "clear_all":
        context.user_data['pool'] = []  # –û—á–∏—â–∞–µ–º –≤—ã–±–æ—Ä
    else:
        # –ï—Å–ª–∏ –≥–µ—Ä–æ–π —É–∂–µ –≤ –ø—É–ª–µ, —É–±–∏—Ä–∞–µ–º –µ–≥–æ, –µ—Å–ª–∏ –Ω–µ—Ç - –¥–æ–±–∞–≤–ª—è–µ–º
        if selected_hero in pool:
            pool.remove(selected_hero)
        else:
            pool.append(selected_hero)
        context.user_data['pool'] = pool

    await query.message.edit_text("–í—ã–±–µ—Ä–∏ –ø—É–ª:", reply_markup=pool_keyboard(context.user_data['pool']))

async def confirm_registration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = context.user_data

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Ä–∞–Ω–≥
    rank = data.get('rank', '–ù–µ –≤—ã–±—Ä–∞–Ω–æ')
    subrank_index = data.get('subrank', None)

    if subrank_index is not None:
        subrank = roman_numerals[subrank_index - 1]  # –£—á–∏—Ç—ã–≤–∞–µ–º, —á—Ç–æ subrank –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 1
        full_rank = f"{rank} {subrank}"
    else:
        full_rank = rank

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    playtime = data.get('playtime', '–ù–µ –≤—ã–±—Ä–∞–Ω–æ')
    pool = data.get('pool', [])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω—ã –ª–∏ –≤—Å–µ –≥–µ—Ä–æ–∏
    if pool == POOL_LIST:
        pool_text = '–í—Å–µ'
    else:
        pool_text = ', '.join(pool) if pool else '–ù–µ –≤—ã–±—Ä–∞–Ω–æ'

    confirmation_text = (
        f"‚ú® <b>–¢–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ:</b>\n\n"
        f"üõ°Ô∏è <b>–†–∞–Ω–≥:</b> {full_rank}\n"
        f"‚è≥ <b>–ß–∞—Å—ã –≤ –∏–≥—Ä–µ:</b> {playtime}\n"
        f"ü¶∏‚Äç‚ôÇÔ∏è <b>–ì–µ—Ä–æ–∏:</b> {pool_text}\n\n"
        f"<i>–ï—Å–ª–∏ –≤—Å–µ –≤–µ—Ä–Ω–æ, –Ω–∞–∂–º–∏ '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'.</i>"
    )

    keyboard = InlineKeyboardMarkup([ 
        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
    ])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    query = update.callback_query
    await query.message.edit_text(confirmation_text, reply_markup=keyboard, parse_mode='HTML')

    return CONFIRM

async def confirm_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "cancel":
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –æ—Ç–º–µ–Ω–∏–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.")
        await query.message.edit_text("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return ConversationHandler.END

    elif query.data == "confirm":
        username = update.effective_user.username

        if not username:
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –Ω–µ —É–∫–∞–∑–∞–ª –Ω–∏–∫–Ω–µ–π–º –≤ Telegram.")
            await query.message.reply_text("–£ —Ç–µ–±—è –Ω–µ—Ç –Ω–∏–∫–∞ –≤ Telegram.\n–£–∫–∞–∂–∏ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏:")
            return PHONE

        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            await save_registration_data(update, context)
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
            await query.message.reply_text("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! üéâ", parse_mode='HTML')
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}: {e}")
            await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
        
        return ConversationHandler.END

async def phone_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    phone = update.message.text
    user_id = update.effective_user.id

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ context.user_data
    context.user_data['phone'] = phone
    
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await save_registration_data(update, context)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {phone}.")
        await update.message.reply_text("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! üéâ", parse_mode='HTML')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")

    return ConversationHandler.END

async def save_registration_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    data = context.user_data
    pool_str = ','.join(data.get('pool', [])) if data.get('pool') else None
    phone = data.get('phone', None)

    logger.info(f"Saving data for user_id: {user_id}, rank: {data.get('rank')}, subrank: {data.get('subrank')}, "
                f"playtime: {data.get('playtime')}, pool: {pool_str}, phone: {phone}")

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        conn = await get_db_connection()

        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await conn.execute("""
            UPDATE players
            SET rank = $1, subrank = $2, playtime = $3, pool = $4, phone = $5
            WHERE user_id = $6
        """, data.get('rank'), data.get('subrank'), data.get('playtime'), pool_str, phone, user_id)

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        await conn.close()
    except Exception as e:
        logger.error(f"Database error while saving data for user_id {user_id}: {e}")
        raise  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –±—ã–ª–æ –ø–æ–Ω—è—Ç–Ω–æ, —á—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {context.error}")

async def buttons_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ —Ä–∞–Ω–≥–∞
    if data in RANKS:
        return await rank_choice(update, context)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ä–∞–Ω–≥–æ–≤ (—á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ 6)
    elif data.isdigit():  # –ü–æ–¥—Ä–∞–Ω–≥–∏ (—á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ 6)
        return await subrank_choice(update, context)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –∏–≥—Ä—ã
    elif data in PLAYTIME_OPTIONS:
        return await playtime_choice(update, context)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥–µ—Ä–æ—è –∏–∑ –ø—É–ª–∞ –∏–ª–∏ –Ω–∞–∂–∞—Ç–∏—è "next"
    elif data in POOL_LIST or data == "next":
        return await pool_choice(update, context)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–º–µ–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    elif data in ["confirm", "cancel"]:
        return await confirm_choice(update, context)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ "–í—ã–±—Ä–∞—Ç—å –≤—Å–µ" –∏ "–û—á–∏—Å—Ç–∏—Ç—å"
    elif data == "select_all":
        context.user_data['pool'] = POOL_LIST[:]  # –í—ã–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö –≥–µ—Ä–æ–µ–≤
        await query.message.edit_text("–í—ã–±–µ—Ä–∏ –ø—É–ª:", reply_markup=pool_keyboard(POOL_LIST))
        return
    
    elif data == "clear_all":
        context.user_data['pool'] = []  # –û—á–∏—â–∞–µ–º –ø—É–ª
        await query.message.edit_text("–í—ã–±–µ—Ä–∏ –ø—É–ª:", reply_markup=pool_keyboard([]))
        return
    
    elif data == "back_to_rank":
        context.user_data['rank'] = None
        await query.message.edit_text("–í—ã–±–µ—Ä–∏ —Ä–∞–Ω–≥:", reply_markup=rank_keyboard())
        return RANK  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ –≤—ã–±–æ—Ä —Ä–∞–Ω–≥–∞

    # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
    logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è callback_data: {data}")
    await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")

def register_handlers(application: Application):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏."""
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('reg', reg)],
        states={
            RANK: [CallbackQueryHandler(buttons_handler)],
            SUBRANK: [CallbackQueryHandler(buttons_handler)],
            PLAYTIME: [CallbackQueryHandler(buttons_handler)],
            POOL: [CallbackQueryHandler(buttons_handler)],
            CONFIRM: [CallbackQueryHandler(buttons_handler)],
            PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, phone_choice)]
        },
        fallbacks=[]
    )

    application.add_handler(CommandHandler("start", start))
    application.add_handler(conv_handler)
    application.add_error_handler(error_handler)

def main():
    application = Application.builder().token("7510014005:AAHxbLaHcWlDEx95MkHsqc_y2mrX6NStYU4").build()
    register_handlers(application)
    application.run_polling()

if __name__ == '__main__':
    main()
